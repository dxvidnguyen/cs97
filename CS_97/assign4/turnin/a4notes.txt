1) Use GitHub from a browser to compute the difference between the previous and current commit to this repository. Save the resulting web page as a file prevcur.html.

use /compare to compare commits 
use .. to compare between different commits 
HEAD vs HEAD^ current and previous commits 
https://github.com/eggert/tz/compare/HEAD..HEAD^


2) Use GitHub from a browser to compute the difference between tzdb releases 2020f and 2021a. Save the resulting web page as a file 2020f-2021a.html.

https://github.com/eggert/tz/compare/2020f..2021a
- saved this webpage as an html file 

3) Clone the tzdb development repository, in Git format.

git clone https://github.com/eggert/tz.git
- creates a folder called tz 
- it is a clone 


4) Write a shell or Python script justone that displays the difference from the previous and current commit, assuming the repository is what an ordinary Git command would use. Use your command on the just-cloned repository, and put the output of your command into a file justone.out.

create bash script (justone.sh)
give it permissions (chmod u+rwx justone.sh)

write in the bash script
#!/bin/bash - tells file to read it as a bash script
git diff HEAD HEAD^ - compare the ccurrent and previous commit
note: HEAD^ does not seem to be working

git diff HEAD^! 
- ^ represents the before 
- ! represents the previous 

need to get different of prevous and current commit of tz so we need to go into that file 
- run the justone.sh and have output in the justone.out 
note: justone.sh is not in teh ddirectory 
(it is in the dirrectory before)
- fix by adding ../ to justone.sh to be able to run it 


5) Write a shell or Python script compare-releases that displays the difference between two tzdb releases given as arguments to the command. For example, compare-releases 2020f 2021a should output the difference between tzdb release 2020f and tzdb release 2021a. Put the output of this particular invocation into a file 2020f-2021a.diff.

create bash script file (compare-release.sh)
edit code within file
#!/bin/bash - reads as bash scripot
git diff $1..$2 - different between input $1 and input $2 

add permiussions
chmod u+rwx compare-release.sh  ( read write excecute )

run in tz directory 
store output in ../2020f-2021a 
code ran in tz directory 
../compare-release.sh 2020f 2021a > ../2020f-2021a.diff 
-> takes in 2020f as $1 and 2021a as $2


6) Suppose we're interested in the number of commits from each time zone. Write a shell or Python script tzcount that postprocesses the output of git log and outputs a simple report of time zones and number of commits from that time zone. Each line of output should look something like "-0500 1802", meaning there were 1802 commits from the -0500 time zone. Sort the output numerically by its first (numeric timezone) column. Run the command git log 2021a | ./tzcount using the tzdb repository, and put its output into a file tzdb-2021a.tzcount.

comments in code explain everything 


7) Suppose the maintainer of tzdb is being sued for copyright infringement because one of the source files contains the following statement: "Even newspaper reports present contradictory information." Also suppose the plaintiff claims that this statement was improperly copied from the plaintiff's book. Use Git and other commands to find out how this statement was introduced to the tzdb files. Create a text file who-contributed.txt that describes what commands and/or scripts that you used, and what the result of your investigation was.


command
mdfind "Even newspaper reports present contradictory information"
- this is to find all the files that has this line of text
- in the northamerica file of tz

in tz directory use the following:

git log -S <searchString> : when the given string was added to removed from the repo
- will give the author and the date of when they added it 

there is a certain phrase we want to search for 
git log -S "Even newspaper reports present contradictory information."

commit c12b432741eed9a422fbf99fa27af6e7a941d88b
Author: Arthur David Olson <ado@elsie>
Date:   Thu Dec 21 11:43:42 1995 -0500

    Eggert changes
    
    SCCS-file: northamerica
    SCCS-SID: 7.20

 we get this and we know the commit the author and the date it was published

commit: c12b4327

command
git show c12b4327

What is displayed
 diff --git a/northamerica b/northamerica
index 92b55af..9b8a5ec 100644
--- a/northamerica
+++ b/northamerica
@@ -14,25 +14,24 @@
 
 # United States
 
+# From Paul Eggert <eggert@twinsun.com> (1995-12-19):
+# A good source for time zone historical data in the US is
+# Thomas G. Shanks, The American Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1991).
+# Make sure you have the errata sheet; the book is somewhat useless without it.
+# It is the source for the US and Puerto Rico entries below.
:

if we go into the northamerica file we see that eggert wrote 

Shanks partitioned Indiana into 345 regions, each with its own time history,
# and wrote "Even newspaper reports present contradictory information."
# Those Hoosiers!  Such a flighty and changeable people!
# Fortunately, most of the complexity occurred before our cutoff date of 1970.

This is a quote and it does give creidt to Shanks


Summary
went to tz repository 
used mdfind to see the files where the quote might be
used git log -S <text> to find the commit 
- we saw the author of the commit to be Arthur David Olson
- note: we know now that the line in question is in the north america file
used git show <commit> to see the comments in the commit 
- we saw that there were three people adding in this commit 
- 1) Arthur David Olson
- 2) seismo!munnari!kre
- 3) Paul Eggert 
used cat northamerica to look into the file
- found the quote using control+f 
- the line in question was writen by paul eggert 
- line is in quotes and eggert gives credits to Shanks

Overall: While eggert wrote the line, he gave credit to Shanks and did not copy.

commands: 
*assumes we are in the tz repository*
mdfind "Even newspaper reports present contradictory information."
git log -S "Even newspaper reports present contradictory information."
	note: press q to quit
git show c12b4327
	note: press q to quit
cat northamerica 
	note: use control+f to find the quote



1) Find the mergepoint M at 7dd52bfd8e503316b4aa9c5767850d3985626b26 (2020-10-17) and the commit C at c00606171f88be0df2c19346fa53f401ea71c71f (2020-10-10) and describe the relationship between C and M, by drawing a graph containing all paths from C to M. Your diagram need not list every commit in all the paths, but you should label and list every commit with more than one parent, or with more than one child. For example, your graph should have a node labeled C and M because C has multiple childen and M has multiple parents, and the graphâ€™s legend should say that C is c00606171f88be0df2c19346fa53f401ea71c71f and that M is 7dd52bfd8e503316b4aa9c5767850d3985626b26.

go into directory provided
note: need to be on seasnet

cd ~eggert/src/gnu/emacs

http://git.savannah.gnu.org/cgit/emacs.git/commit/
use this website and then navigate through different commits


2) Clone the GNU Emacs git repository yourself from Savannah, and briefly describe the differences between your repository and the one in ~eggert/src/gnu/emacs. (Hint: look at the output of git branch.)

Branch for Savannah 
 * master
Branch for Eggerts 
  comment-cache
  concurrency-libtask
  dima_regex_embedded_modifiers
  elparized-core
  emacs-23
  emacs-24
  emacs-25
  emacs-26
  emacs-27
  feature/async-dns
  feature/auth-source-pass
  feature/byte-switch
  feature/byte-tail-recursion
  feature/byte-unwind-protect
  feature/core-elpa-by-copy
  feature/deps-download
  feature/etags-update
  feature/extend_face_id
  feature/gnus-select
  feature/gnus-select2
  feature/integrated-elpa
  feature/libjit
  feature/mhtml-mode
  feature/new-tutorial
  feature/noverlay
  feature/parsable-ert-output
  feature/smaller-windows
  feature/stdout-stderr-stream
  feature/tabs
  feature/temacs-for-bootstrap
  feature/tramp-thread-safe
  feature/windows-with-utils
  features/erc-message-tags
  fix/bootstrap-build-minimize
  fix/bootstrap-build-minimize-squash
  fix/bug-2034
  fix/bug-20871
  fix/bug-21072
  fix/bug-31311-pcase-doc
  fix/bug-31311-pcase-doc-squash
  fix/bug-34657-erc-hooks
  fix/bug-35351
  fix/eieio-persistent
  fix/great-revert-bill
  fix/htmlfontify-21990
  fix/not-defined-at-runtime
  gtk-tabs
  heads/emacs-25.3
* master
  netsec
  nick.lloyd-bytecode-jit
  old-branches/EMACS_21_1_RC
  old-branches/EMACS_22_BASE
  old-branches/EMACS_23_1_RC
  old-branches/NewVC-fileset
  old-branches/branch-5_8
  old-branches/cairo
  old-branches/cedet-branch
  old-branches/concurrency
  old-branches/dynamic-modules-rc2
  old-branches/emacs-unicode
  old-branches/emacs-unicode-2
  old-branches/font-backend
  old-branches/gerd_defvaralias
  old-branches/gnus-5_10-branch
  old-branches/imagemagick
  old-branches/lexbind
  old-branches/lexbind-new
  old-branches/multi-tty
  old-branches/pending
  old-branches/profiler
  old-branches/python
  old-branches/rmail-mbox-branch
  old-branches/unicode-xft
  old-branches/window-pub
  other-branches/Boehm-GC
  other-branches/Boehm-versions
  other-branches/DAVELOVE
  other-branches/FLYSPELL
  other-branches/ILYA
  other-branches/VENDOR
  other-branches/custom_themes
  other-branches/fx-branch
  other-branches/gerd_0001
  other-branches/gerd_big
  other-branches/gerd_dbe
  other-branches/gerd_int
  other-branches/miles-orphaned-changes
  other-branches/old-bidi
  other-branches/old-concurrency
  other-branches/patches_21_0
  other-branches/test2
  other-branches/ttn-vms-21-2-stash
  other-branches/ttn-vms-21-3-stash
  pdumper
  pending
  project-next
  scratch/a-modest-completion-redesign-proposal
  scratch/accurate-warning-pos
  scratch/add-jsonrpc
  scratch/albinus
  scratch/allow-custom-load-paths-in-elisp-flymake
  scratch/allow-custom-null-and-false-objects-in-jsonc
  scratch/api.el
  scratch/benchmarks
  scratch/build-test
  scratch/completion-api
  scratch/customize-quotes
  scratch/dbusbind-type
  scratch/dbusbind-type-tests
  scratch/dir-local-wildcard
  scratch/dynamic-modules-2
  scratch/eudc-bbdb-3
  scratch/fido-mode
  scratch/fix-33794-extend-electric-layout-mode
  scratch/fix-info-dups
  scratch/fix-snapshot-building
  scratch/flymake-augment-api
  scratch/flymake-diagnostics-buffer
  scratch/flymake-refactor-cleaner-for-emacs-26
  scratch/follow
  scratch/fontify-open-string
  scratch/gnus-decoded
  scratch/gnus-docs
  scratch/gnus-hashtables
  scratch/gnus-roadmap
  scratch/gnus-search
  scratch/hard-narrow
  scratch/highlight-n-windows
  scratch/isearch-show-toggles
  scratch/jit-lock-antiblink
  scratch/jit-lock-antiblink-cleaned-up
  scratch/joaot/make-completion-at-point-function
  scratch/kqueue
  scratch/last-cedet-merge
  scratch/merge-cedet-tests
  scratch/multi-level-test-makefile
  scratch/new-flex-completion-style
  scratch/nonspecial-handlers
  scratch/np/backports-26.2
  scratch/ns/draw-to-bitmap
  scratch/ns/next
  scratch/nsxwidget
  scratch/octave-eldoc-fixes
  scratch/org-mode-merge
  scratch/project
  scratch/project-auto-tags
  scratch/project-directories
  scratch/project-directories-filtering-in-backend
  scratch/project-directories-with-shallow
  scratch/project-files-pipe-grep
  scratch/quote-escaping
  scratch/raeburn-startup
  scratch/record
  scratch/remove-internal-field
  scratch/resolve-cc-mode-and-e-p-m
  scratch/some-more-icomplete-hacks
  scratch/support-plists-in-jsonc
  scratch/support-plists-in-jsonc-autodetect
  scratch/tsdh-vc-list-files
  scratch/tzz/cicd
  scratch/tzz/gnus-cloud-aead
  scratch/tzz/import-pl
  scratch/widen-less
  scratch/widen-limits
  scratch/windows-branch-build-2
  scratch/with-fetched-url
  scratch/xref
  scratch/xref-next
  shr-fontified
  stream
  test-concurrency
  wallet
  widen-less
  x-tabs
  xwidget
  xwidget_mvp
  z100
  z101


We can see that branch for eggerts has a lot more stuff


3) And now for a more open-ended search. The Git 2.30.1 Release Notes (2021-02-08) say "Newline characters in the host and path part of git:// URL are now forbidden." Which code change or changes actually made this happen, and who authored the change? Do not worry about subsequent administrative changes such as merge commits; look for the original changes that actually fixed the problem in question. Give the SHA1 commit IDs for the relevant changes, and explain how you discovered them, all in a text file git.txt. Also generate patch files for the relevant changes, in git format-patch format.

git log -S <text> 

first i go into the clone directory

use git log -S "Newline characters in the host and path part of git:// URL are now forbidden"
- didnt work

now trying
git log -S "Newline characters in the host and path"

Two commits show up 
commit d5922333cb0cc15ddd75be3b102b42c34de9a96a
commit e6362826a0409539642a5738db61827e5978e2e4
- both by same author: Junio C Hamano

Looking into commits 

git show d5922333cb0cc15ddd75be3b102b42c34de9a96a

Date:   Fri Feb 5 16:30:42 2021 -0800
- the statement inside doesnt say much
Prepare for 2.30.1
Signed-off-by: Junio C Hamano <gitster@pobox.com>
- Release notes: 
This release is primarily to merge fixes accumulated on the 'master'
+front to prepare for 2.31 release that are still relevant to 2.30.x
+maintenance track.
- overall this commit does not give a lot of info and is it just a release note

git show e6362826a0409539642a5738db61827e5978e2e4
- shows author and date 
Author: Junio C Hamano <gitster@pobox.com>
- tells us that there have been updates
Updates since v2.30 

...
scroll down and see 
 Newline characters in the host and path part of git:// URL are
+   now forbidden.
+   (merge 6aed56736b jk/forbid-lf-in-git-url later to maint).

go to commit 6aed56736b
Author: Jeff King <peff@peff.net>
Date:   Thu Jan 7 04:44:17 2021 -0500

scroll down to see 
The previous commit taught the clone/fetch client side to reject a
    git:// URL with a newline in it. Let's also catch these when fscking a
    .gitmodules file, which will give an earlier warning.

 need to go to previous commit 
 commit a02ea577174ab8ed18f847cf1693f213e0b9c473

 we see:
 if (strchr(target_host, '\n') || strchr(path, '\n'))
+               die(_("newline is forbidden in git:// hosts and repo paths"));
 
        /*
- code that fixes the issue

Need to make  patch
git format-patch -1 <commitID> 
git format-patch -1 a02ea577174ab8ed18f847cf1693f213e0b9c473

we get this file 
0001-git_connect_git-forbid-newlines-in-host-and-path.patch

use command 
git add 0001-git_connect_git-forbid-newlines-in-host-and-path.patch

and now the file has been added




commands 
*assumes we are in git repository (clone)*
git log -S "Newline characters in the host and path"
git show d5922333cb0cc15ddd75be3b102b42c34de9a96a
git show e6362826a0409539642a5738db61827e5978e2e4
git show 6aed56736b
git show 6aed56736b^
*note: in commit a02ea577174ab8ed18f847cf1693f213e0b9c473*
git format-patch -1 a02ea577174ab8ed18f847cf1693f213e0b9c473
git add 0001-git_connect_git-forbid-newlines-in-host-and-path.patch



what is inside the patch file:
From a02ea577174ab8ed18f847cf1693f213e0b9c473 Mon Sep 17 00:00:00 2001
From: Jeff King <peff@peff.net>
Date: Thu, 7 Jan 2021 04:43:58 -0500
Subject: [PATCH] git_connect_git(): forbid newlines in host and path

When we connect to a git:// server, we send an initial request that
looks something like:

  002dgit-upload-pack repo.git\0host=example.com

If the repo path contains a newline, then it's included literally, and
we get:

  002egit-upload-pack repo
  .git\0host=example.com

This works fine if you really do have a newline in your repository name;
the server side uses the pktline framing to parse the string, not
newlines. However, there are many _other_ protocols in the wild that do
parse on newlines, such as HTTP. So a carefully constructed git:// URL
can actually turn into a valid HTTP request. For example:

  git://localhost:1234/%0d%0a%0d%0aGET%20/%20HTTP/1.1 %0d%0aHost:localhost%0d%0a%0d%0a

becomes:

  0050git-upload-pack /
  GET / HTTP/1.1
  Host:localhost

  host=localhost:1234

on the wire. Again, this isn't a problem for a real Git server, but it
does mean that feeding a malicious URL to Git (e.g., through a
submodule) can cause it to make unexpected cross-protocol requests.
Since repository names with newlines are presumably quite rare (and
indeed, we already disallow them in git-over-http), let's just disallow
them over this protocol.

Hostnames could likewise inject a newline, but this is unlikely a
problem in practice; we'd try resolving the hostname with a newline in
it, which wouldn't work. Still, it doesn't hurt to err on the side of
caution there, since we would not expect them to work in the first
place.

The ssh and local code paths are unaffected by this patch. In both cases
we're trying to run upload-pack via a shell, and will quote the newline
so that it makes it intact. An attacker can point an ssh url at an
arbitrary port, of course, but unless there's an actual ssh server
there, we'd never get as far as sending our shell command anyway.  We
_could_ similarly restrict newlines in those protocols out of caution,
but there seems little benefit to doing so.

The new test here is run alongside the git-daemon tests, which cover the
same protocol, but it shouldn't actually contact the daemon at all.  In
theory we could make the test more robust by setting up an actual
repository with a newline in it (so that our clone would succeed if our
new check didn't kick in). But a repo directory with newline in it is
likely not portable across all filesystems. Likewise, we could check
git-daemon's log that it was not contacted at all, but we do not
currently record the log (and anyway, it would make the test racy with
the daemon's log write). We'll just check the client-side stderr to make
sure we hit the expected code path.

Reported-by: Harold Kim <h.kim@flatt.tech>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
---
 connect.c             | 2 ++
 t/t5570-git-daemon.sh | 5 +++++
 2 files changed, 7 insertions(+)

diff --git a/connect.c b/connect.c
index 79f1b3b242..7b4b65751d 100644
--- a/connect.c
+++ b/connect.c
@@ -1063,6 +1063,8 @@ static struct child_process *git_connect_git(int fd[2], char *hostandport,
 		target_host = xstrdup(hostandport);
 
 	transport_check_allowed("git");
+	if (strchr(target_host, '\n') || strchr(path, '\n'))
+		die(_("newline is forbidden in git:// hosts and repo paths"));
 
 	/*
 	 * These underlying connection commands die() if they
diff --git a/t/t5570-git-daemon.sh b/t/t5570-git-daemon.sh
index 7466aad111..336d417a90 100755
--- a/t/t5570-git-daemon.sh
+++ b/t/t5570-git-daemon.sh
@@ -102,6 +102,11 @@ test_expect_success 'fetch notices corrupt idx' '
 	)
 '
 
+test_expect_success 'client refuses to ask for repo with newline' '
+	test_must_fail git clone "$GIT_DAEMON_URL/repo$LF.git" dst 2>stderr &&
+	test_i18ngrep newline.is.forbidden stderr
+'
+
 test_remote_error()
 {
 	do_export=YesPlease
-- 
2.29.2







